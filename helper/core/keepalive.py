import asyncio
import random
import json
import logging
import os
from datetime import datetime, time
from typing import List, Dict

from helper.core.qdrant_client import get_qdrant_client
from helper.core.qdrant_client import get_relevant_chunks
from config import QDRANT_URL, QDRANT_API_KEY, QDRANT_COLLECTION, ADMIN_ID

logger = logging.getLogger(__name__)

_current_report_time = 21    # –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞


def get_current_report_time():
    return _current_report_time


def set_current_report_time(new_time: int):
    global _current_report_time
    _current_report_time = new_time


class KeepAlive:
    def __init__(self):
        self.bot = None
        self.is_running = False
        self.task = None
        self.embeddings_dir = "helper/data/keepalive_questions"
        self.daily_stats = {
            "date": None,
            "total_queries": 0,
            "successful_queries": 0,
            "failed_queries": 0
        }
    

    def _load_embedding_files(self) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª—ã —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏ –∏–∑ –ø–∞–ø–∫–∏"""
        embeddings = []
        if not os.path.exists(self.embeddings_dir):
            logger.warning(f"–ü–∞–ø–∫–∞ {self.embeddings_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return embeddings
        
        for filename in os.listdir(self.embeddings_dir):
            if filename.endswith('.json'):
                try:
                    file_path = os.path.join(self.embeddings_dir, filename)
                    with open(file_path, 'r', encoding='utf-8') as f:
                        data = json.load(f)
                        data['filename'] = filename
                        embeddings.append(data)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(embeddings)} —Ñ–∞–π–ª–æ–≤ —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏")
        return embeddings
    

    def _get_random_embedding(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —ç–º–±–µ–¥–¥–∏–Ω–≥ –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö"""
        embeddings = self._load_embedding_files()
        if not embeddings:
            raise ValueError("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
        return random.choice(embeddings)
    

    async def make_keepalive_query(self, bot):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω keep-alive –∑–∞–ø—Ä–æ—Å"""
        try:
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —ç–º–±–µ–¥–¥–∏–Ω–≥
            embedding_data = self._get_random_embedding()
            question_text = embedding_data.get('text', 'Unknown question')
            question_vector = embedding_data['vector']
            
            logger.info(f"–í—ã–ø–æ–ª–Ω—è—é keep-alive –∑–∞–ø—Ä–æ—Å: {question_text}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Qdrant
            qdrant_client = get_qdrant_client(QDRANT_URL, QDRANT_API_KEY)
            relevant_chunks = get_relevant_chunks(
                client=qdrant_client,
                collection_name=QDRANT_COLLECTION,
                question_vector=question_vector,
                top_k=3
            )
            
            self.daily_stats["total_queries"] += 1
            self.daily_stats["successful_queries"] += 1
            
            logger.info(f"Keep-alive –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω.")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ keep-alive –∑–∞–ø—Ä–æ—Å–µ: {e}")
            self.daily_stats["total_queries"] += 1
            self.daily_stats["failed_queries"] += 1
            await self.send_notification(bot)
            return False
    

    def _generate_daily_schedule(self) -> List[time]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å: 2-3 —Å–ª—É—á–∞–π–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–∏"""
        num_queries = random.randint(2, 3)  # 2 –∏–ª–∏ 3 –∑–∞–ø—Ä–æ—Å–∞
        times = []
        
        for _ in range(num_queries):
            # –°–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É 9:00 –∏ 20:00
            hour = random.randint(9, 20)
            minute = random.randint(1, 59)
            times.append(time(hour, minute))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        return sorted(times)
    

    async def _wait_until(self, target_time: time):
        """–û–∂–∏–¥–∞–µ—Ç –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        now = datetime.now()
        target_datetime = datetime.combine(now.date(), target_time)
        
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        if target_datetime <= now:
            target_datetime = target_datetime.replace(day=target_datetime.day + 1)
        
        wait_seconds = (target_datetime - now).total_seconds() + random.randint(5, 50)
        logger.info(f"–û–∂–∏–¥–∞—é {wait_seconds:.0f} —Å–µ–∫—É–Ω–¥ –¥–æ {target_time}")
        await asyncio.sleep(wait_seconds)
    

    async def send_daily_report(self, bot):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É"""
        today = datetime.now().strftime("%d.%m.%Y")
        report_text = (
            f"üìä –û—Ç—á–µ—Ç –ø–æ keep-alive –∑–∞–ø—Ä–æ—Å–∞–º\n"
            f"–î–∞—Ç–∞: {today}\n"
            f"–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {self.daily_stats['total_queries']}\n"
            f"–£—Å–ø–µ—à–Ω—ã—Ö: {self.daily_stats['successful_queries']}\n"
            f"–û—à–∏–±–æ–∫: {self.daily_stats['failed_queries']}\n"
            f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã —É—Å–ø–µ—à–Ω—ã' if self.daily_stats['failed_queries'] == 0 else '‚ö†Ô∏è –ë—ã–ª–∏ –æ—à–∏–±–∫–∏'}"
        )
        
        try:
            await bot.send_message(chat_id=ADMIN_ID, text=report_text)
            logger.info("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞: {e}")


    async def send_notification(self, bot):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω—É"""
        report_text = (f"‚ö†Ô∏è –° –ë–î –∫–∞–∫–∞—è-—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ ‚ö†Ô∏è")
        
        try:
            await bot.send_message(chat_id=ADMIN_ID, text=report_text)
            logger.info("–ê–¥–º–∏–Ω—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏ –æ–± –æ—à–∏–±–∫–µ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞: {e}")


    async def run(self, bot):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∑–∞–¥–∞—á–∏"""
        self.is_running = True
        self.bot = bot
        logger.info("–ó–∞–ø—É—Å–∫ keep-alive –∑–∞–¥–∞—á–∏")
        
        while self.is_running:
            try:
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                today = datetime.now().date()
                self.daily_stats = {
                    "date": today,
                    "total_queries": 0,
                    "successful_queries": 0,
                    "failed_queries": 0
                }
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                schedule = self._generate_daily_schedule()
                logger.info(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {[t.strftime('%H:%M') for t in schedule]}")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
                for query_time in schedule:
                    await self._wait_until(query_time)
                    if not self.is_running:
                        break
                    await self.make_keepalive_query(bot)
                
                # –ñ–¥–µ–º –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞
                if self.is_running:
                    report_time = time(get_current_report_time)
                    await self._wait_until(report_time)
                    await self.send_daily_report(bot)
                
                # –ñ–¥–µ–º –¥–æ 2:00 —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
                if self.is_running:
                    await self._wait_until(time(1, 0))  # 1:00 –Ω–æ—á–∏
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ keep-alive –∑–∞–¥–∞—á–µ: {e}")
                await asyncio.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
    

    def start(self, bot):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–¥–∞—á—É"""
        if not self.is_running:
            self.task = asyncio.create_task(self.run(bot))
    

    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–¥–∞—á—É"""
        self.is_running = False
        if self.task:
            self.task.cancel()


keepalive = KeepAlive()
