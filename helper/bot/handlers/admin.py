import os
from datetime import datetime

from aiogram import Router, F
from aiogram.types import Message, FSInputFile, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from helper.core.keepalive import get_current_report_time, set_current_report_time
from helper.bot.moderation import block_user, unblock_user
from helper.core.model_state import get_current_model, set_current_model, get_current_topk, set_current_topk
from config import ADMIN_ID

admin_router = Router()


class SetModelState(StatesGroup):
    choosing = State()


class SetTopK(StatesGroup):
    choosing = State()


class SetReportTime(StatesGroup):
    choosing = State()


class NotifyUserState(StatesGroup):
    waiting_for_id = State()
    waiting_for_message = State()
    confirm = State()


AVAILABLE_MODELS = [
    "gpt-4.1-mini-2025-04-14",
    "o4-mini-2025-04-16",
    "gpt-4.1-2025-04-14",
    "gpt-4o-2024-08-06",
    "claude-3-haiku-20240307",
    "claude-3-5-haiku-20241022",
    "claude-3-7-sonnet-20250219",
    "claude-sonnet-4-20250514",
    "gemini-2.5-flash-preview-05-20",
    "gemini-2.5-pro-preview-06-05"
]

MODEL_PRICE = {"gpt-4.1-mini-2025-04-14": "0.5‚ÇΩ",
    "o4-mini-2025-04-16": "2.1‚ÇΩ",
    "gpt-4.1-2025-04-14": "2.75‚ÇΩ",
    "gpt-4o-2024-08-06": "2.7‚ÇΩ",
    "claude-3-haiku-20240307": "0.41‚ÇΩ",
    "claude-3-5-haiku-20241022": "1.7‚ÇΩ",
    "claude-3-7-sonnet-20250219": "5.5‚ÇΩ",
    "claude-sonnet-4-20250514": "5.8‚ÇΩ",
    "gemini-2.5-flash-preview-05-20": "0.05‚ÇΩ",
    "gemini-2.5-pro-preview-06-05": "2.6‚ÇΩ"}


@admin_router.message(Command("notify_user"))
async def notify_user_start(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ Message ID —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")
    await state.set_state(NotifyUserState.waiting_for_id)


@admin_router.message(NotifyUserState.waiting_for_id)
async def notify_user_get_id(message: Message, state: FSMContext):
    try:
        user_id, message_id = map(int, message.text.split())
        await state.update_data(user_id=user_id)
        await state.update_data(message_id=message_id)
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:")
        await state.set_state(NotifyUserState.waiting_for_message)
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.")


@admin_router.message(NotifyUserState.waiting_for_message)
async def notify_user_get_message(message: Message, state: FSMContext):
    await state.update_data(message_text=message.text)

    data = await state.get_data()
    preview = f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{data['user_id']}</code>:\n\n{data['message_text']}"

    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="notify:send")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="notify:cancel")
    builder.adjust(2)

    await message.answer(preview, parse_mode="HTML", reply_markup=builder.as_markup())
    await state.set_state(NotifyUserState.confirm)


@admin_router.callback_query(F.data.startswith("notify:"))
async def notify_user_confirm(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        return await callback.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)

    action = callback.data.split(":", 1)[1]

    if action == "cancel":
        await callback.message.edit_text("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await state.clear()
        return

    data = await state.get_data()
    user_id = data["user_id"]
    message_text = data["message_text"]
    message_id = data["message_id"]

    try:
        await callback.bot.send_message(chat_id=user_id, text=message_text, reply_to_message_id=message_id)
        await callback.message.edit_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: <pre>{e}</pre>", parse_mode="HTML")

    await state.clear()


@admin_router.message(Command("set_model"))
async def start_set_model(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return

    builder = InlineKeyboardBuilder()
    for model in AVAILABLE_MODELS:
        builder.button(text=model + ' ' + MODEL_PRICE[model], callback_data=f"model:{model}")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="model:cancel")
    builder.adjust(1)

    cur_model = get_current_model()

    await message.answer(f"–°–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω–∞ {cur_model} \n –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=builder.as_markup())
    await state.set_state(SetModelState.choosing)


@admin_router.callback_query(F.data.startswith("model:"))
async def model_chosen(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        return await callback.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)

    model = callback.data.split(":", 1)[1]

    if model == "cancel":
        await callback.message.edit_text("‚ùå –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –æ—Ç–º–µ–Ω—ë–Ω.")
        await state.clear()
        return
    
    set_current_model(model)
    await callback.message.edit_text(f"‚úÖ –ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: <b>{model}</b>", parse_mode="HTML")
    await state.clear()


@admin_router.message(Command("cur_model"))
async def show_current_model(message: Message):
    if message.from_user.id != ADMIN_ID:
        return

    cur_model = get_current_model()

    await message.answer(f"–°–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω–∞: \n{cur_model}")


@admin_router.message(Command("set_topk"))
async def start_set_topk(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return

    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="topk:cancel")

    cur_topk = get_current_topk()

    await message.answer(f"–°–µ–π—á–∞—Å –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–ø {cur_topk} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π\n –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–Ω–∏–µ:", reply_markup=builder.as_markup())
    await state.set_state(SetTopK.choosing)


@admin_router.callback_query(F.data == "topk:cancel")
async def cancel_set_top_k(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        return await callback.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)

    await callback.message.edit_text("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ top_k –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()


@admin_router.message(SetTopK.choosing)
async def topk_value_entered(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        new_value = int(message.text)
        if new_value <= 0:
            raise ValueError("top_k –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")

        set_current_topk(new_value)
        await message.answer(f"‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ top_k —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: <b>{new_value}</b>", parse_mode="HTML")
        await state.clear()

    except ValueError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (—Ü–µ–ª–æ–µ, –±–æ–ª—å—à–µ 0), –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞.")


@admin_router.message(Command("logs"))
@admin_router.message(F.text.lower() == "–ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏")
async def send_logs(message: Message):

    await message.bot.send_message(
        chat_id=ADMIN_ID, 
        text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} \nid: {message.from_user.id} –ø—Ä–æ—Å–∏–ª –ª–æ–≥–∏'
        )
    if message.from_user.id != ADMIN_ID:
        return

    excel_path = os.path.join("logs", "logs.xlsx")

    if os.path.exists(excel_path):
        await message.answer_document(FSInputFile(excel_path))


@admin_router.message(F.text.startswith("–ó–∞–±–∞–Ω–∏—Ç—å"))
async def handle_block_command(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        _, user_str, minutes_str = message.text.split()
        user_id = int(user_str)
        minutes = int(minutes_str)
        block_user(user_id, minutes)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ {minutes} –º–∏–Ω—É—Ç.")

    except Exception:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –±–ª–æ–∫ @username 60")


@admin_router.message(F.text.startswith("–†–∞–∑–±–∞–Ω–∏—Ç—å"))
async def handle_unblock_command(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        _, user_str = message.text.split()
        username = user_str.lstrip("@")
        unblock_user(username)
        await message.answer(f"üîì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    except Exception:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: —Ä–∞–∑–±–ª–æ–∫ @username")


@admin_router.message(Command("set_report_time"))
async def start_set_rep_time(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return

    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="reptime:cancel")

    cur_report_time = get_current_report_time()
    cur_time = datetime.now()

    await message.answer(f"–°–µ–π—á–∞—Å –æ—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ <b>{cur_report_time}:00</b>\n"
                         f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: <b>{cur_time.strftime("%H:%M")}</b>\n"
                         f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (—á–∞—Å):",
                         parse_mode="HTML",
                         reply_markup=builder.as_markup())
    await state.set_state(SetReportTime.choosing)


@admin_router.callback_query(F.data == "reptime:cancel")
async def cancel_set_rep_time(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        return await callback.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)

    await callback.message.edit_text("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç—á—ë—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()


@admin_router.message(SetReportTime.choosing)
async def rep_time_entered(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        new_value = int(message.text)
        if new_value < 0 or new_value > 23:
            raise ValueError("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç 0 –¥–æ 23")

        set_current_report_time(new_value)
        await message.answer(f"‚úÖ –ù–æ–≤–æ–µ –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: <b>{new_value}:00</b>. –û–Ω–æ –±—É–¥–µ—Ç —É—á—Ç–µ–Ω–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å", parse_mode="HTML")
        await state.clear()

    except ValueError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 23, –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞.")