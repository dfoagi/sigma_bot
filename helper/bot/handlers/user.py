from aiogram import Router, F
from aiogram.types import Message, ChatMemberUpdated
from aiogram.filters import Command

from helper.core.qdrant_client import get_qdrant_client
from helper.core.ask_llm import get_answer
from helper.core.model_state import get_current_model
from helper.bot.moderation import is_user_blocked, is_rate_limited
from log_tools.log_worker import log_queue
from config import QDRANT_URL, QDRANT_API_KEY, GROUP_ID, ADMIN_ID


user_router = Router()
qdrant_client = get_qdrant_client(QDRANT_URL, QDRANT_API_KEY)

start_help_message = '''
    üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî <b>–°–∏–≥–º–∞ –ü–ë –ë–æ—Ç</b>, –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –°–∏–≥–º–∞ –ü–ë. –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å ‚Äî —è –Ω–∞–π–¥—É –æ—Ç–≤–µ—Ç –≤ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    ‚ùó <b>–§–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏ —Ç–æ—á–Ω–æ</b>
    üî¥ ¬´–ü–æ—á–µ–º—É –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∞?¬ª
    üü¢ ¬´–ü–æ—á–µ–º—É –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –û–§–ü –º–æ–∂–µ—Ç –ø—Ä–µ—Ä—ã–≤–∞—Ç—å—Å—è –±–µ–∑ –æ—à–∏–±–∫–∏? –ö–∞–∫ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å?¬ª

    üí¨ <b>–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ, –¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:</b>
    ‚úñÔ∏è ¬´–ö–∞–∫ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å?¬ª ‚Äî <i>–Ω–µ –ø–æ–¥–æ–π–¥–µ—Ç</i>
    ‚úîÔ∏è ¬´–ü–æ—á–µ–º—É —Ä–∞—Å—á–µ—Ç –û–§–ü –º–æ–∂–µ—Ç –ø—Ä–µ—Ä—ã–≤–∞—Ç—å—Å—è –±–µ–∑ –æ—à–∏–±–∫–∏? –ö–∞–∫ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å?¬ª ‚Äî <i>–æ—Ç–ª–∏—á–Ω–æ</i>

    üìà <b>–í–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–º–æ–≥–∞—é—Ç —Å–¥–µ–ª–∞—Ç—å –±–æ—Ç–∞ –ª—É—á—à–µ</b>
    –ú—ã –≤–∏–¥–∏–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã, —á—Ç–æ–±—ã —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.
'''


@user_router.message(Command("start"))
async def handle_start(message: Message):
    await message.answer(start_help_message, parse_mode='HTML')


@user_router.message(Command("help"))
async def handle_start(message: Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer(
            "–ß—Ç–æ–±—ã –∑–∞–±–∞–Ω–∏—Ç—å –Ω–∞–ø–∏—à–∏:\n"
            "–ó–∞–±–∞–Ω–∏—Ç—å user_id *–∫–æ–ª-–≤–æ –º–∏–Ω—É—Ç*\n\n"
            "–ß—Ç–æ–±—ã —Ä–∞–∑–±–∞–Ω–∏—Ç—å –Ω–∞–ø–∏—à–∏:\n"
            "–†–∞–∑–±–∞–Ω–∏—Ç—å user_id \n\n"
            "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏:\n"
            "–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –∏–ª–∏ /logs\n\n"
            "–°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å - /set_model \n"
            "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–¥–µ–ª—å - /cur_model \n"
        )
    else:
        await message.answer(start_help_message, parse_mode='HTML')


@user_router.message(F.text)
async def handle_message(message: Message):
    user_message = message.text
    username = message.from_user.username
    user_id = message.from_user.id

    if is_user_blocked(user_id):
        await message.answer("–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É")
        return

    if is_rate_limited(user_id):
        await message.answer("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 20 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
        return

    status_msg = await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å...")

    try:
        current_model = get_current_model()

        got_ans, chapter_ids, chapter_scores, prompt_tokens, response_tokens, used_model = await get_answer(
            user_question=user_message,
            qdrant_client=qdrant_client,
            collection_name="sigmaRP_large",
            model=current_model,
            top_k=3
            )

    except Exception as e:
        await status_msg.delete()
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–Ω–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–ª—É–∂–±–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏. \n"
                             "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Å—Ä–æ—á–Ω—ã–π - –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞ support@3ksigma.ru")
        await message.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É @{username} id={user_id}:\n<pre>{e}</pre>",
            parse_mode="HTML"
        )
        return

    await status_msg.delete()
    await message.answer(got_ans)

    group_text = (
        f'@{username} id={user_id}:\n"{user_message}"\n\n'
        f"<b>{used_model}</b>:\n\"{got_ans}\""
    )
    await message.bot.send_message(chat_id=GROUP_ID, text=group_text, parse_mode='HTML')

    await log_queue.put({
        "username": username,
        "user_id": message.from_user.id,
        "question": user_message,
        "answer": got_ans,
        "input_tokens": prompt_tokens,
        "output_tokens": response_tokens,
        "chapter_ids": chapter_ids,
        "chapter_scores": chapter_scores,
        "model": used_model
    })


@user_router.my_chat_member()
async def on_bot_added_or_changed(event: ChatMemberUpdated, bot):
    chat = event.chat
    if chat.id != GROUP_ID:
        await bot.leave_chat(chat.id)
